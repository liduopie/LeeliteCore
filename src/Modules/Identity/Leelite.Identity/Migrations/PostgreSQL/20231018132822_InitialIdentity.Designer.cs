// <auto-generated />
using System;
using System.Collections.Generic;
using Leelite.Identity.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Leelite.Identity.Migrations.PostgreSQL
{
    [DbContext(typeof(IdentityContext))]
    [Migration("20231018132822_InitialIdentity")]
    partial class InitialIdentity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0-rc.2.23480.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Leelite.Identity.Models.RoleAgg.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Identity_Roles", (string)null);
                });

            modelBuilder.Entity("Leelite.Identity.Models.RoleClaimAgg.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("ClaimValue")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Identity_RoleClaims", (string)null);
                });

            modelBuilder.Entity("Leelite.Identity.Models.UserAgg.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Birthday")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReal")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("LastModifierId")
                        .HasColumnType("bigint");

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("NickName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("ProfilePicture")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("RealName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("SecurityStamp")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Sex")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.ComplexProperty<Dictionary<string, object>>("Account", "Leelite.Identity.Models.UserAgg.User.Account#UserAccount", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("NormalizedUserName")
                                .HasMaxLength(32)
                                .HasColumnType("character varying(32)")
                                .HasColumnName("NormalizedUserName");

                            b1.Property<string>("UserName")
                                .HasMaxLength(32)
                                .HasColumnType("character varying(32)")
                                .HasColumnName("UserName");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Email", "Leelite.Identity.Models.UserAgg.User.Email#UserEmail", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Email")
                                .HasMaxLength(32)
                                .HasColumnType("character varying(32)")
                                .HasColumnName("Email");

                            b1.Property<bool>("EmailConfirmed")
                                .HasMaxLength(32)
                                .HasColumnType("boolean")
                                .HasColumnName("EmailConfirmed");

                            b1.Property<string>("NormalizedEmail")
                                .HasMaxLength(32)
                                .HasColumnType("character varying(32)")
                                .HasColumnName("NormalizedEmail");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Facial", "Leelite.Identity.Models.UserAgg.User.Facial#UserFacial", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("FeatureCode")
                                .HasColumnType("text")
                                .HasColumnName("FeatureCode");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("IDCard", "Leelite.Identity.Models.UserAgg.User.IDCard#UserIDCard", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Address")
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("Address");

                            b1.Property<DateTimeOffset>("EndDate")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("EndDate");

                            b1.Property<string>("Ethnicity")
                                .HasMaxLength(32)
                                .HasColumnType("character varying(32)")
                                .HasColumnName("Ethnicity");

                            b1.Property<string>("Fingerprint")
                                .HasColumnType("text")
                                .HasColumnName("Fingerprint");

                            b1.Property<string>("IDNumber")
                                .HasMaxLength(32)
                                .HasColumnType("character varying(32)")
                                .HasColumnName("IDNumber");

                            b1.Property<string>("IssuingAuthority")
                                .HasMaxLength(64)
                                .HasColumnType("character varying(64)")
                                .HasColumnName("IssuingAuthority");

                            b1.Property<string>("Photo")
                                .HasColumnType("text")
                                .HasColumnName("Photo");

                            b1.Property<DateTimeOffset>("StartDate")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("StartDate");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Password", "Leelite.Identity.Models.UserAgg.User.Password#UserPassword", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("PasswordHash")
                                .HasMaxLength(1024)
                                .HasColumnType("character varying(1024)")
                                .HasColumnName("PasswordHash");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Phone", "Leelite.Identity.Models.UserAgg.User.Phone#UserPhone", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("PhoneNumber")
                                .HasMaxLength(64)
                                .HasColumnType("character varying(64)")
                                .HasColumnName("PhoneNumber");

                            b1.Property<bool>("PhoneNumberConfirmed")
                                .HasMaxLength(64)
                                .HasColumnType("boolean")
                                .HasColumnName("PhoneNumberConfirmed");
                        });

                    b.HasKey("Id");

                    b.ToTable("Identity_Users", (string)null);
                });

            modelBuilder.Entity("Leelite.Identity.Models.UserClaimAgg.UserClaim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ClaimType")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("ClaimValue")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Identity_UserClaims", (string)null);
                });

            modelBuilder.Entity("Leelite.Identity.Models.UserFingerprintAgg.UserFingerprint", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("FingerName")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Fingerprint")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Identity_UserFingerprints", (string)null);
                });

            modelBuilder.Entity("Leelite.Identity.Models.UserKeyAgg.UserKey", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("KeyId")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("PublicKey")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("SignatureData")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("SignatureRule")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.ToTable("Identity_UserKeys", (string)null);
                });

            modelBuilder.Entity("Leelite.Identity.Models.UserLoginAgg.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("Identity_UserLogins", (string)null);
                });

            modelBuilder.Entity("Leelite.Identity.Models.UserRoleAgg.UserRole", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("Identity_UserRoles", (string)null);
                });

            modelBuilder.Entity("Leelite.Identity.Models.UserTokenAgg.UserToken", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("Identity_UserTokens", (string)null);
                });

            modelBuilder.Entity("Leelite.Identity.Models.RoleClaimAgg.RoleClaim", b =>
                {
                    b.HasOne("Leelite.Identity.Models.RoleAgg.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Leelite.Identity.Models.UserAgg.User", b =>
                {
                    b.OwnsOne("Leelite.Identity.Models.UserAgg.UserLock", "Lock", b1 =>
                        {
                            b1.Property<long>("UserId")
                                .HasColumnType("bigint");

                            b1.Property<bool>("LockoutEnabled")
                                .HasColumnType("boolean")
                                .HasColumnName("LockoutEnabled");

                            b1.Property<DateTimeOffset?>("LockoutEnd")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("LockoutEnd");

                            b1.HasKey("UserId");

                            b1.ToTable("Identity_Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Lock");
                });

            modelBuilder.Entity("Leelite.Identity.Models.UserClaimAgg.UserClaim", b =>
                {
                    b.HasOne("Leelite.Identity.Models.UserAgg.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Leelite.Identity.Models.UserFingerprintAgg.UserFingerprint", b =>
                {
                    b.HasOne("Leelite.Identity.Models.UserAgg.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Leelite.Identity.Models.UserLoginAgg.UserLogin", b =>
                {
                    b.HasOne("Leelite.Identity.Models.UserAgg.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Leelite.Identity.Models.UserRoleAgg.UserRole", b =>
                {
                    b.HasOne("Leelite.Identity.Models.RoleAgg.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Leelite.Identity.Models.UserAgg.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Leelite.Identity.Models.UserTokenAgg.UserToken", b =>
                {
                    b.HasOne("Leelite.Identity.Models.UserAgg.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
