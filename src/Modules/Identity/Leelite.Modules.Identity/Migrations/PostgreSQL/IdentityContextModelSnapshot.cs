// <auto-generated />
using System;
using Leelite.Modules.Identity.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Leelite.Modules.Identity.Migrations.PostgreSQL
{
    [DbContext(typeof(IdentityContext))]
    partial class IdentityContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Leelite.Modules.Identity.Models.RoleAgg.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Description")
                        .HasColumnType("character varying(1024)")
                        .HasMaxLength(1024);

                    b.Property<string>("Name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("Identity_Roles");
                });

            modelBuilder.Entity("Leelite.Modules.Identity.Models.RoleClaimAgg.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("ClaimValue")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Identity_RoleClaims");
                });

            modelBuilder.Entity("Leelite.Modules.Identity.Models.UserAgg.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Birthday")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Creator")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReal")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LastModifierId")
                        .HasColumnType("bigint");

                    b.Property<string>("Modifier")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NickName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("character varying(1024)")
                        .HasMaxLength(1024);

                    b.Property<string>("RealName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Sex")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Identity_Users");
                });

            modelBuilder.Entity("Leelite.Modules.Identity.Models.UserClaimAgg.UserClaim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("ClaimValue")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Identity_UserClaims");
                });

            modelBuilder.Entity("Leelite.Modules.Identity.Models.UserFingerprintAgg.UserFingerprint", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("FingerName")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("Fingerprint")
                        .HasColumnType("character varying(1024)")
                        .HasMaxLength(1024);

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Identity_UserFingerprints");
                });

            modelBuilder.Entity("Leelite.Modules.Identity.Models.UserKeyAgg.UserKey", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("KeyId")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("PublicKey")
                        .HasColumnType("character varying(1024)")
                        .HasMaxLength(1024);

                    b.Property<string>("SignatureData")
                        .HasColumnType("character varying(1024)")
                        .HasMaxLength(1024);

                    b.Property<string>("SignatureRule")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("Identity_UserKeys");
                });

            modelBuilder.Entity("Leelite.Modules.Identity.Models.UserLoginAgg.UserLogin", b =>
                {
                    b.Property<string>("_loginProvider")
                        .HasColumnType("text");

                    b.Property<string>("_providerKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("_loginProvider", "_providerKey");

                    b.HasIndex("UserId");

                    b.ToTable("Identity_UserLogins");
                });

            modelBuilder.Entity("Leelite.Modules.Identity.Models.UserRoleAgg.UserRole", b =>
                {
                    b.Property<long>("_userId")
                        .HasColumnName("UserId")
                        .HasColumnType("bigint");

                    b.Property<int>("_roleId")
                        .HasColumnName("RoleId")
                        .HasColumnType("integer");

                    b.Property<long?>("UserId")
                        .IsRequired()
                        .HasColumnName("UserRole_UserId")
                        .HasColumnType("bigint");

                    b.HasKey("_userId", "_roleId");

                    b.HasIndex("UserId");

                    b.HasIndex("_roleId");

                    b.ToTable("Identity_UserRoles");
                });

            modelBuilder.Entity("Leelite.Modules.Identity.Models.UserTokenAgg.UserToken", b =>
                {
                    b.Property<long>("_userId")
                        .HasColumnName("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("_loginProvider")
                        .HasColumnType("text");

                    b.Property<string>("_name")
                        .HasColumnType("text");

                    b.Property<long?>("UserId")
                        .IsRequired()
                        .HasColumnName("UserToken_UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("_userId", "_loginProvider", "_name");

                    b.HasIndex("UserId");

                    b.ToTable("Identity_UserTokens");
                });

            modelBuilder.Entity("Leelite.Modules.Identity.Models.RoleClaimAgg.RoleClaim", b =>
                {
                    b.HasOne("Leelite.Modules.Identity.Models.RoleAgg.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Leelite.Modules.Identity.Models.UserAgg.User", b =>
                {
                    b.OwnsOne("Leelite.Modules.Identity.Models.UserAgg.UserAccount", "Account", b1 =>
                        {
                            b1.Property<long>("UserId")
                                .HasColumnType("bigint");

                            b1.Property<string>("NormalizedUserName")
                                .HasColumnName("NormalizedUserName")
                                .HasColumnType("character varying(256)")
                                .HasMaxLength(256);

                            b1.Property<string>("UserName")
                                .HasColumnName("UserName")
                                .HasColumnType("character varying(256)")
                                .HasMaxLength(256);

                            b1.HasKey("UserId");

                            b1.HasIndex("NormalizedUserName")
                                .IsUnique()
                                .HasName("UserNameIndex");

                            b1.ToTable("Identity_Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("Leelite.Modules.Identity.Models.UserAgg.UserEmail", "Email", b1 =>
                        {
                            b1.Property<long>("UserId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Email")
                                .HasColumnName("Email")
                                .HasColumnType("character varying(256)")
                                .HasMaxLength(256);

                            b1.Property<bool>("EmailConfirmed")
                                .HasColumnName("EmailConfirmed")
                                .HasColumnType("boolean")
                                .HasMaxLength(256);

                            b1.Property<string>("NormalizedEmail")
                                .HasColumnName("NormalizedEmail")
                                .HasColumnType("character varying(256)")
                                .HasMaxLength(256);

                            b1.HasKey("UserId");

                            b1.HasIndex("NormalizedEmail")
                                .HasName("EmailIndex");

                            b1.ToTable("Identity_Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("Leelite.Modules.Identity.Models.UserAgg.UserFacial", "Facial", b1 =>
                        {
                            b1.Property<long>("UserId")
                                .HasColumnType("bigint");

                            b1.Property<string>("FeatureCode")
                                .HasColumnName("FeatureCode")
                                .HasColumnType("text");

                            b1.HasKey("UserId");

                            b1.ToTable("Identity_Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("Leelite.Modules.Identity.Models.UserAgg.UserIDCard", "IDCard", b1 =>
                        {
                            b1.Property<long>("UserId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Address")
                                .HasColumnName("Address")
                                .HasColumnType("character varying(256)")
                                .HasMaxLength(256);

                            b1.Property<DateTimeOffset>("EndDate")
                                .HasColumnName("EndDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("Ethnicity")
                                .HasColumnName("Ethnicity")
                                .HasColumnType("character varying(32)")
                                .HasMaxLength(32);

                            b1.Property<string>("Fingerprint")
                                .HasColumnName("Fingerprint")
                                .HasColumnType("text");

                            b1.Property<string>("IDNumber")
                                .HasColumnName("IDNumber")
                                .HasColumnType("character varying(32)")
                                .HasMaxLength(32);

                            b1.Property<string>("IssuingAuthority")
                                .HasColumnName("IssuingAuthority")
                                .HasColumnType("character varying(64)")
                                .HasMaxLength(64);

                            b1.Property<string>("Photo")
                                .HasColumnName("Photo")
                                .HasColumnType("text");

                            b1.Property<DateTimeOffset>("StartDate")
                                .HasColumnName("StartDate")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("UserId");

                            b1.ToTable("Identity_Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("Leelite.Modules.Identity.Models.UserAgg.UserLock", "Lock", b1 =>
                        {
                            b1.Property<long>("UserId")
                                .HasColumnType("bigint");

                            b1.Property<bool>("LockoutEnabled")
                                .HasColumnName("LockoutEnabled")
                                .HasColumnType("boolean");

                            b1.Property<DateTimeOffset?>("LockoutEnd")
                                .HasColumnName("LockoutEnd")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("UserId");

                            b1.ToTable("Identity_Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("Leelite.Modules.Identity.Models.UserAgg.UserPassword", "Password", b1 =>
                        {
                            b1.Property<long>("UserId")
                                .HasColumnType("bigint");

                            b1.Property<string>("PasswordHash")
                                .HasColumnName("PasswordHash")
                                .HasColumnType("character varying(1024)")
                                .HasMaxLength(1024);

                            b1.HasKey("UserId");

                            b1.ToTable("Identity_Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("Leelite.Modules.Identity.Models.UserAgg.UserPhone", "Phone", b1 =>
                        {
                            b1.Property<long>("UserId")
                                .HasColumnType("bigint");

                            b1.Property<string>("PhoneNumber")
                                .HasColumnName("PhoneNumber")
                                .HasColumnType("character varying(64)")
                                .HasMaxLength(64);

                            b1.Property<bool>("PhoneNumberConfirmed")
                                .HasColumnName("PhoneNumberConfirmed")
                                .HasColumnType("boolean")
                                .HasMaxLength(64);

                            b1.HasKey("UserId");

                            b1.ToTable("Identity_Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });
                });

            modelBuilder.Entity("Leelite.Modules.Identity.Models.UserClaimAgg.UserClaim", b =>
                {
                    b.HasOne("Leelite.Modules.Identity.Models.UserAgg.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Leelite.Modules.Identity.Models.UserFingerprintAgg.UserFingerprint", b =>
                {
                    b.HasOne("Leelite.Modules.Identity.Models.UserAgg.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Leelite.Modules.Identity.Models.UserLoginAgg.UserLogin", b =>
                {
                    b.HasOne("Leelite.Modules.Identity.Models.UserAgg.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Leelite.Modules.Identity.Models.UserRoleAgg.UserRole", b =>
                {
                    b.HasOne("Leelite.Modules.Identity.Models.UserAgg.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Leelite.Modules.Identity.Models.RoleAgg.Role", null)
                        .WithMany()
                        .HasForeignKey("_roleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Leelite.Modules.Identity.Models.UserTokenAgg.UserToken", b =>
                {
                    b.HasOne("Leelite.Modules.Identity.Models.UserAgg.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
