<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ include file="..\..\commons.t4" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ parameter type="System.String" name="ClassName" #>
<#@ parameter type="System.String" name="ClassFullName" #>
<#@ parameter type="System.String" name="Namespace" #>
<#@ parameter type="System.String" name="AssemblyPath" #>
<#
    var assembly = Assembly.LoadFile(AssemblyPath); 
    var classType = assembly.GetType(ClassFullName);
    var idProp = classType.GetProperties().Where(c => c.Name == "Id").FirstOrDefault();
    var moudleNmae = Namespace.Split('.')[Namespace.Split('.').Length-1];
#>
using Leelite.Framework.Domain.Repository;
using Leelite.Framework.Domain.UnitOfWork;
using <#=Namespace #>.Contexts;
using <#=Namespace #>.Models.<#=ClassName #>Agg;

namespace <#=Namespace #>.Repositories
{
    public interface I<#=ClassName #>Repository : IRepository<<#=ClassName #>, <#=TypeConver(idProp.PropertyType.Name) #>>
    {
    }

    public class <#=ClassName #>Repository : EFRepository<<#=ClassName #>, <#=TypeConver(idProp.PropertyType.Name) #>>, I<#=ClassName #>Repository
    {
        public <#=ClassName #>Repository(<#=moudleNmae #>Context dbContext, IUnitOfWork unitOfWork) : base(dbContext, unitOfWork) { }
    }
}
